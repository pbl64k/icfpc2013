
from z3 import *

import copy

init('./Z3/z3-4.3.2.30df2837fbff-x86-ubuntu-12.04/bin/libz3.so')

def solve_model(logger, cl, sz, operators0, vals):
    #print vals

    operators = copy.deepcopy(operators0)
    operators.append('id')

    s = Solver()

    zero = BitVecVal(0, 64)
    one = BitVecVal(1, 64)

    steps = sz - 2

    ops = []

    for step in range(steps):
        ops.append({})
        for op in operators:
            ops[step][op] = Int('ops_' + str(step) + '_' + op)
            s.add(Or(ops[step][op] == 0, ops[step][op] == 1))
        s.add(Sum(ops[step].values()) == 1)

    args = []

    for step in range(steps):
        args.append([{}])
        args[step][0]['zero'] = [zero, BitVec('args_' + str(step) + '_' + str(0) + '_' + 'zero', 64)]
        s.add(Or(args[step][0]['zero'][1] == 0, args[step][0]['zero'][1] == 1))
        args[step][0]['one'] = [one, BitVec('args_' + str(step) + '_' + str(0) + '_' + 'one', 64)]
        s.add(Or(args[step][0]['one'][1] == 0, args[step][0]['one'][1] == 1))
        args[step][0]['m_x'] = [None, BitVec('args_' + str(step) + '_' + str(0) + '_' + 'm_x', 64)]
        s.add(Or(args[step][0]['m_x'][1] == 0, args[step][0]['m_x'][1] == 1))

        for st in range(step):
            args[step][0]['svs_' + str(st)] = [None, BitVec('args_' + str(step) + '_' + str(0) + '_' + 'svs_' + str(st), 64)]
            s.add(Or(args[step][0]['svs_' + str(st)][1] == 0, args[step][0]['svs_' + str(st)][1] == 1))

        s.add(Sum(map(lambda x: x[1], args[step][0].values())) == 1)

    val_num = 0

    for x in vals:
        fx = vals[x]

        m_x = BitVecVal(x, 64)
        m_fx = BitVecVal(fx, 64)

        svs = []

        for step in range(steps):
            args[step][0]['m_x'][0] = m_x

            for st in range(step):
                args[step][0]['svs_' + str(st)][0] = svs[st]

            svs.append(BitVec('svs_' + str(val_num) + '_' + str(step), 64))

            op_m = []

            for op in operators:
                op_m.append(gen_op(op, ops[step], args[step], svs[step]))

            s.add(apply(Or, op_m))

        s.add(m_fx == svs[steps - 1])

        val_num += 1

    print s.check()
    model = s.model()
    for k in model:
        mk = str(model[k])
        if (k.name()[:3] == 'ops' or k.name()[:4] == 'args') and mk == '1':
            print k.name(), mk
    exit()

    return True

def gen_op(op, ops, args, svs):
    if op == 'id':
        expr = gen_arg(args[0]) == svs
    elif op == 'not':
        expr = ~gen_arg(args[0]) == svs
    elif op == 'shl1':
        expr = gen_arg(args[0]) << 1 == svs
    elif op == 'shr1':
        expr = LShR(gen_arg(args[0]), 1) == svs
    elif op == 'shr4':
        expr = LShR(gen_arg(args[0]), 4) == svs
    elif op == 'shr16':
        expr = LShR(gen_arg(args[0]), 16) == svs
    else:
        print 'FAIL -', op
        exit()
    return And(ops[op] == 1, expr)

def gen_arg(args):
    expr = 0
    for k in args:
        val, var = args[k]
        expr += var * val
    return expr

#solve_model(None, None, 3, ['not'], {0: 0xffffffffffffffff, 2: 0xfffffffffffffffd})
#solve_model(None, None, 3, ['shr4'], {0: 0, 0x10: 1, 0xf0: 0xf})

#t = {0: 0, 1: 0, 2: 1, 3: 1, 4: 2, 7: 3, 8: 4, 72623859790382856L: 36311929895191428L, 11835553023213624136L: 5917776511606812068L, 15: 7, 16: 8, 1710520839286457966L: 855260419643228983L, 10795585436019124801L: 5397792718009562400L, 8525716132196271213L: 4262858066098135606L, 993275162052913455L: 496637581026456727L, 4347641950426510088L: 2173820975213255044L, 5371642432474416581L: 2685821216237208290L, 9959010584328211282L: 4979505292164105641L, 5159908086545411145L: 2579954043272705572L, 12248752002924412177L: 6124376001462206088L, 6217099212944749911L: 3108549606472374955L, 4670764314576008950L: 2335382157288004475L, 3739365779931751625L: 1869682889965875812L, 13713014738261451633L: 6856507369130725816L, 829045579374596506L: 414522789687298253L, 16638451783837456200L: 8319225891918728100L, 3917472747972622712L: 1958736373986311356L, 6183178964353161435L: 3091589482176580717L, 9029594826900463497L: 4514797413450231748L, 16474581656094182733L: 8237290828047091366L, 13443039030224485741L: 6721519515112242870L, 11051726832805921118L: 5525863416402960559L, 9344734870739139118L: 4672367435369569559L, 1715459991835015285L: 857729995917507642L, 9747150945186501145L: 4873575472593250572L, 18413068526944023549L: 9206534263472011774L, 8915026543879409059L: 4457513271939704529L, 14351399399219120269L: 7175699699609560134L, 13090362976585480320L: 6545181488292740160L, 16830541831164286376L: 8415270915582143188L, 2912731640917875726L: 1456365820458937863L, 6010871669120020573L: 3005435834560010286L, 2009065010938490962L: 1004532505469245481L, 7493037618292640853L: 3746518809146320426L, 6089144452412043707L: 3044572226206021853L, 9549731804077890452L: 4774865902038945226L, 6352192068060602710L: 3176096034030301355L, 2197319162905980477L: 1098659581452990238L, 13062392352338155454L: 6531196176169077727L, 9646724887402159416L: 4823362443701079708L, 11119625489382026222L: 5559812744691013111L, 14071217475522411689L: 7035608737761205844L, 4625944419667766286L: 2312972209833883143L, 4651999558010741625L: 2325999779005370812L, 1126201428697829079L: 563100714348914539L, 8370941002777009648L: 4185470501388504824L, 11455944004903541775L: 5727972002451770887L, 4309955021056176946L: 2154977510528088473L, 6566364915815638618L: 3283182457907819309L, 9170010657445747291L: 4585005328722873645L, 14796371274494840292L: 7398185637247420146L, 6933315220125152011L: 3466657610062576005L, 17814483461310161454L: 8907241730655080727L, 5003474864476593314L: 2501737432238296657L, 13362160751036439875L: 6681080375518219937L, 13820374519238196826L: 6910187259619098413L, 8186378676835974785L: 4093189338417987392L, 12796888402170902618L: 6398444201085451309L, 8359923093685453226L: 4179961546842726613L, 8671059197620637773L: 4335529598810318886L, 363805403229281426L: 181902701614640713L, 7417035069235719253L: 3708517534617859626L, 15183080682623214887L: 7591540341311607443L, 6375232108692595612L: 3187616054346297806L, 3224612245826265820L: 1612306122913132910L, 11174757740594700199L: 5587378870297350099L, 4194183440958815269L: 2097091720479407634L, 17183791603176856371L: 8591895801588428185L, 8485713351306383182L: 4242856675653191591L, 890726109057937945L: 445363054528968972L, 247561861926571635L: 123780930963285817L, 495968127419944006L: 247984063709972003L, 3166009572319303100L: 1583004786159651550L, 4940797294640698805L: 2470398647320349402L, 18083754563511102246L: 9041877281755551123L, 1881608981126495562L: 940804490563247781L, 15952314284130290863L: 7976157142065145431L, 7913756843135270024L: 3956878421567635012L, 13918200867733784619L: 6959100433866892309L, 1580659134405885506L: 790329567202942753L, 7697313527118590682L: 3848656763559295341L, 4920375283219536250L: 2460187641609768125L, 13263826777648881052L: 6631913388824440526L, 7409082725245568325L: 3704541362622784162L, 7272046567412429552L: 3636023283706214776L, 3748184378598451462L: 1874092189299225731L, 6767964301621571870L: 3383982150810785935L, 425330725119050433L: 212665362559525216L, 15846615497664149351L: 7923307748832074675L, 6326987379492919119L: 3163493689746459559L, 15284052424934029339L: 7642026212467014669L, 16000436562464978057L: 8000218281232489028L, 6151563464691490932L: 3075781732345745466L, 12464927853976163585L: 6232463926988081792L, 4328537793908159147L: 2164268896954079573L, 5765968309487861566L: 2882984154743930783L, 8756608258919860751L: 4378304129459930375L, 6697927080978538931L: 3348963540489269465L, 15607060681537590245L: 7803530340768795122L, 12101469573525961841L: 6050734786762980920L, 6569360761070533146L: 3284680380535266573L, 14722023801496612935L: 7361011900748306467L, 16170201632716630583L: 8085100816358315291L, 11824979905302240405L: 5912489952651120202L, 3444286622334117732L: 1722143311167058866L, 12471555058620212969L: 6235777529310106484L, 17215080780228661300L: 8607540390114330650L, 3813419775461602276L: 1906709887730801138L, 12368921848162720791L: 6184460924081360395L, 10846469405329782538L: 5423234702664891269L, 4726622931083003002L: 2363311465541501501L, 17127369643478968075L: 8563684821739484037L, 255: 127, 256: 128, 5785633783033478588L: 2892816891516739294L, 16823201430826008176L: 8411600715413004088L, 17044992657233029760L: 8522496328616514880L, 9340119331934620533L: 4670059665967310266L, 14458755253773660093L: 7229377626886830046L, 3527267259395980329L: 1763633629697990164L, 17552439640966033969L: 8776219820483016984L, 141456822860995283L: 70728411430497641L, 9129528194810754727L: 4564764097405377363L, 4127293463260385354L: 2063646731630192677L, 1382040646753079916L: 691020323376539958L, 14888293862669317295L: 7444146931334658647L, 4150310138226545150L: 2075155069113272575L, 2291890435303422348L: 1145945217651711174L, 13055910479616845438L: 6527955239808422719L, 3672725008559281455L: 1836362504279640727L, 7776534818597684362L: 3888267409298842181L, 16138184551043994567L: 8069092275521997283L, 8541598583691827321L: 4270799291845913660L, 10777146596202428192L: 5388573298101214096L, 16674965088883351741L: 8337482544441675870L, 10731280155479776435L: 5365640077739888217L, 8464041808107050243L: 4232020904053525121L, 3807571655748367081L: 1903785827874183540L, 14676408620803156296L: 7338204310401578148L, 10351983295562856758L: 5175991647781428379L, 6183607534690800759L: 3091803767345400379L, 15134554691478239933L: 7567277345739119966L, 10670090561596110938L: 5335045280798055469L, 2102615887562693633L: 1051307943781346816L, 12800125329300826886L: 6400062664650413443L, 18283656570072668266L: 9141828285036334133L, 14757029122851174993L: 7378514561425587496L, 15604876134045399308L: 7802438067022699654L, 3757358843731609410L: 1878679421865804705L, 10457433388598887672L: 5228716694299443836L, 7680772166876722715L: 3840386083438361357L, 10270825734118987178L: 5135412867059493589L, 9454461618882669700L: 4727230809441334850L, 7252337644186794435L: 3626168822093397217L, 77203443382692655L: 38601721691346327L, 17992407563552989020L: 8996203781776494510L, 15878519962075940235L: 7939259981037970117L, 18423368953351213792L: 9211684476675606896L, 16418081336297147574L: 8209040668148573787L, 17765587277963340060L: 8882793638981670030L, 16952403472265629120L: 8476201736132814560L, 13512007387370805305L: 6756003693685402652L, 6272201720887920417L: 3136100860443960208L, 774488964211777475L: 387244482105888737L, 8894017576864554334L: 4447008788432277167L, 4328690680674466343L: 2164345340337233171L, 18162681786553348235L: 9081340893276674117L, 16471343233422625281L: 8235671616711312640L, 4027722248584594270L: 2013861124292297135L, 13292748145561905000L: 6646374072780952500L, 3432236958239834137L: 1716118479119917068L, 16500754337154338506L: 8250377168577169253L, 14071167353637367625L: 7035583676818683812L, 54266684129377845L: 27133342064688922L, 3588370486542616966L: 1794185243271308483L, 15507448341883886948L: 7753724170941943474L, 8131660309503764873L: 4065830154751882436L, 2911610301832195015L: 1455805150916097507L, 4259600980296342782L: 2129800490148171391L, 10348048749462915555L: 5174024374731457777L, 16357726611899740122L: 8178863305949870061L, 10688639859079747646L: 5344319929539873823L, 9446712921349787028L: 4723356460674893514L, 11913062940180874231L: 5956531470090437115L, 8027862390343460681L: 4013931195171730340L, 9291430881594859120L: 4645715440797429560L, 17186390169774869196L: 8593195084887434598L, 2316448775263059974L: 1158224387631529987L, 14552102087177179612L: 7276051043588589806L, 4618982364718883750L: 2309491182359441875L, 15346291189441291031L: 7673145594720645515L, 6825005164332045207L: 3412502582166022603L, 11856702265962823561L: 5928351132981411780L, 4141353759463161942L: 2070676879731580971L, 11757071857905461012L: 5878535928952730506L, 6415622553978427119L: 3207811276989213559L, 18080491522185892458L: 9040245761092946229L, 3354039730960199245L: 1677019865480099622L, 17039363728604429166L: 8519681864302214583L, 2533924527586064574L: 1266962263793032287L, 18238076401976277458L: 9119038200988138729L, 14392280786371987088L: 7196140393185993544L, 3126701129498284436L: 1563350564749142218L, 9657823231404454050L: 4828911615702227025L, 11895832457301760794L: 5947916228650880397L, 4254286311288739779L: 2127143155644369889L, 11690859578236814053L: 5845429789118407026L, 10694632029101411990L: 5347316014550705995L, 12522796309362735326L: 6261398154681367663L, 1907821186210786365L: 953910593105393182L, 17009835496142778462L: 8504917748071389231L, 9735796045152019166L: 4867898022576009583L, 14618146272697120493L: 7309073136348560246L, 13874044933534062961L: 6937022466767031480L, 16349133206660415629L: 8174566603330207814L, 5362862132899500831L: 2681431066449750415L, 15126725828635610835L: 7563362914317805417L, 8130722414877085406L: 4065361207438542703L, 7688260507069287085L: 3844130253534643542L, 5787396430847672869L: 2893698215423836434L, 7499006536581295943L: 3749503268290647971L, 3168651263721234001L: 1584325631860617000L, 17169719610178323957L: 8584859805089161978L, 11485846474067391836L: 5742923237033695918L, 4408686489333455072L: 2204343244666727536L, 11789837980720276660L: 5894918990360138330L, 13533429250784620463L: 6766714625392310231L, 2574451761262966184L: 1287225880631483092L, 16094634943113160101L: 8047317471556580050L, 7186769617056087299L: 3593384808528043649L, 16978786894446386478L: 8489393447223193239L, 778551549668972903L: 389275774834486451L, 13767115298001145087L: 6883557649000572543L, 17627519492825806422L: 8813759746412903211L, 1508426869820381105L: 754213434910190552L, 8156378893878018701L: 4078189446939009350L, 9224245333563286448L: 4612122666781643224L, 8505281563188956014L: 4252640781594478007L, 2669646444366413481L: 1334823222183206740L, 5310656016815828596L: 2655328008407914298L, 14665863092908419126L: 7332931546454209563L, 3139433842774721928L: 1569716921387360964L, 9236725287092568649L: 4618362643546284324L, 1845748141986150868L: 922874070993075434L, 1818196373155562931L: 909098186577781465L, 18446744073709551615L: 9223372036854775807L}
#print hex(11835553023213624136L)
#print bin(11835553023213624136L)
#print bin(18033544633053556148)
#x = BitVec('x', 64)
#solve(x == BitVecVal(11835553023213624136L, 64) >> 4)
#solve_model(None, None, 3, ['shr1'], t)

# a sequence of steps, each step represents a creation of new value out of existing ones
# initial values are 0, 1 and x_0
# e.g., step 1 for ops not and shl1:
# v1 = y_1 * (not  (z_1_1 * 0 + z_1_2 * 1 + z_1_3 * x_0))
#    + y_2 * (shl1 (z_2_1 * 0 + z_2_2 * 1 + z_2_3 * x_0))
# where x, y - binary
# subject to:
# sum y = 1
# sum z = 1

# global:
#  must be a tree? all new values must be used exactly once - except for the result
#  enforce number of steps?
#  sum of ys for any given operator >= 1

# nvm, actual model is substantially different.

